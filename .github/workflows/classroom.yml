name: GitHub Classroom Workflow
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build:
    name: Autograding
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Prepare Library For Tests
        run: cd library && npm ci

      - name: Run Cars Unit Tests 
        run: cd services/cars && npm ci && npm run test
      
      - name: Run Payment Unit Tests 
        run: cd services/payment && npm ci && npm run test
      
      - name: Run Rental Unit Tests 
        run: cd services/rental && npm ci && npm run test

      - name: Run Gateway Unit Tests 
        run: cd services/gateway && npm ci && npm run test

      - uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Yandex Cloud Container Registry
        id: login-cr
        uses: yc-actions/yc-cr-login@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

      - name: Build, tag, and push images to Yandex Cloud Container Registry
        env:
          CR_REGISTRY: ${{ vars.YC_CR_REGISTRY }}
          CR_REPOSITORY: ${{ vars.YC_CR_REPOSITORY }}
          IMAGE_TAG: v.${{ github.sha }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          docker compose build && docker compose push 
          test "$REF_NAME" = "master" && (IMAGE_TAG=stable docker compose build && IMAGE_TAG=stable docker compose push) || true

      - name: Install Yandex Cloud CLI
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i /opt/yandex-cloud -n
          ln -s /opt/yandex-cloud/bin/yc /usr/local/bin/yc

      - name: Login To Yandex Cloud CLI 
        run: >
          echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' > key.json && yc config set service-account-key key.json && rm -f key.json
      
      - name: Get Managed Kubernetes Cluster Credentials 
        env: 
          MANAGED_K8S_CLUSTER: ${{ vars.YC_MANAGED_K8S_CLUSTER }}
        run: |
          yc managed-kubernetes cluster get-credentials $MANAGED_K8S_CLUSTER --external --kubeconfig k8s/.kubeconfig
      
      - name: Deploy To Managed Kubernetes Cluster
        env: 
          CR_REGISTRY: ${{ vars.YC_CR_REGISTRY }}
          CR_REPOSITORY: ${{ vars.YC_CR_REPOSITORY }}
          IMAGE_TAG: v.${{ github.sha }}
          DOCKER_USERNAME: ${{ secrets.YC_DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.YC_DOCKER_PASSWORD }}
        run: | 
          cd k8s
          kubectl proxy --port 8080 --kubeconfig .kubeconfig &

          kubectl delete secret regcred --kubeconfig .kubeconfig || true
          kubectl create secret docker-registry regcred \
            --docker-server="cr.yandex" \
            --docker-username="$DOCKER_USERNAME" \
            --docker-password="$DOCKER_PASSWORD" \
            --kubeconfig .kubeconfig

          kubectl delete secret cars-postgresql-conn-string --kubeconfig .kubeconfig || true
          kubectl create secret generic cars-postgresql-conn-string \
            --from-literal=conn-string='${{ secrets.CARS_POSTGRES_CONN_STRING }}' \
            --kubeconfig .kubeconfig

          kubectl delete secret payment-postgresql-conn-string --kubeconfig .kubeconfig || true
          kubectl create secret generic payment-postgresql-conn-string \
            --from-literal=conn-string='${{ secrets.PAYMENT_POSTGRES_CONN_STRING }}' \
            --kubeconfig .kubeconfig

          kubectl delete secret rental-postgresql-conn-string --kubeconfig .kubeconfig || true
          kubectl create secret generic rental-postgresql-conn-string \
            --from-literal=conn-string='${{ secrets.RENTAL_POSTGRES_CONN_STRING }}' \
            --kubeconfig .kubeconfig

          kubectl delete secret gateway-redis-conn-string --kubeconfig .kubeconfig || true
          kubectl create secret generic gateway-redis-conn-string \
            --from-literal=conn-string='${{ secrets.GATEWAY_REDIS_CONN_STRING }}' \
            --kubeconfig .kubeconfig

          helm pull oci://cr.yandex/yc-marketplace/yandex-cloud/ingress-nginx/chart/ingress-nginx \
            --version 4.10.0 \
            --untar

          helm pull oci://registry-1.docker.io/bitnamicharts/postgresql \
            --version 16.2.1 \
            --untar

          helm pull oci://registry-1.docker.io/bitnamicharts/redis \
            --version 20.3.0 \
            --untar

          helm upgrade \
            --install --force \
            --kubeconfig .kubeconfig \
            ingress-nginx ./ingress-nginx

          helm upgrade \
            --install --force \
            --kubeconfig .kubeconfig \
            rsoi-lab4-ingress ./rsoi-lab4-ingress

          helm upgrade \
            --install --force \
            -f values.cars-postgresql.yaml \
            --kubeconfig .kubeconfig \
            cars-postgresql ./postgresql

          helm upgrade \
            --install --force \
            -f values.rental-postgresql.yaml \
            --kubeconfig .kubeconfig \
            rental-postgresql ./postgresql

          helm upgrade \
            --install --force \
            -f values.payment-postgresql.yaml \
            --kubeconfig .kubeconfig \
            payment-postgresql ./postgresql

          helm upgrade \
            --install --force \
            --kubeconfig .kubeconfig \
            gateway-redis ./redis

          helm upgrade \
            --install --force \
            -f values.gateway.yaml \
            --set appImage="cr.yandex/$CR_REGISTRY/$CR_REPOSITORY-gateway:$IMAGE_TAG" \
            --kubeconfig .kubeconfig \
            gateway ./rsoi-lab4-app

          helm upgrade \
            --install --force \
            -f values.cars.yaml \
            --set appImage="cr.yandex/$CR_REGISTRY/$CR_REPOSITORY-cars:$IMAGE_TAG" \
            --kubeconfig .kubeconfig \
            cars ./rsoi-lab4-app

          helm upgrade \
            --install --force \
            -f values.rental.yaml \
            --set appImage="cr.yandex/$CR_REGISTRY/$CR_REPOSITORY-rental:$IMAGE_TAG" \
            --kubeconfig .kubeconfig \
            rental ./rsoi-lab4-app

          helm upgrade \
            --install --force \
            -f values.payment.yaml \
            --set appImage="cr.yandex/$CR_REGISTRY/$CR_REPOSITORY-payment:$IMAGE_TAG" \
            --kubeconfig .kubeconfig \
            payment ./rsoi-lab4-app

      - name: Prepare API Tests
        run: |
          cd v3/postman
          echo '[{ "key": "baseUrl", "value": "${{ vars.PUBLIC_URL }}" }]' > environment.json

      - name: Run API Tests
        uses: matt-ball/newman-action@master
        with:
          collection: v3/postman/collection.json
          environment: v3/postman/environment.json
          delayRequest: 100
          reporters: '[ "cli" ]'

      - uses: education/autograding@v1
        id: autograder
        continue-on-error: true
